name: Update repository with Cruft
on:
  schedule:
    - cron: "0 2 * * 1" # Every Monday at 2am

  workflow_dispatch:

permissions: {}

jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - add-paths: .
            body: Use this to merge the changes to this repository.
            branch: cruft/update
            commit-message: "chore: accept new Cruft update"
            title: New updates detected with Cruft
          - add-paths: .cruft.json
            body: Use this to reject the changes in this repository.
            branch: cruft/reject
            commit-message: "chore: reject new Cruft update"
            title: Reject new updates detected with Cruft
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CRUFT_UPDATE_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Setup GitHub CLI and Git
        run: |
          if [ -z "${{ secrets.CRUFT_UPDATE_TOKEN }}" ]; then
            echo "CRUFT_UPDATE_TOKEN secret is not set, exiting"
            exit 1
          fi
          echo "${{ secrets.CRUFT_UPDATE_TOKEN }}" | gh auth login --with-token
          gh auth setup-git
          git config --global user.email "example@email.com"
          git config --global user.name "your-username"

      - name: Install Cruft
        run: |
          python -m pip install cruft
          python -m cruft

      - name: Check if update is available
        continue-on-error: false
        id: check
        run: |
          CHANGES=0
          if [ -f .cruft.json ]; then
            if ! python -m cruft check; then
              CHANGES=1
            fi
          else
            echo "No .cruft.json file"
          fi

          echo "has_changes=$CHANGES" >> "$GITHUB_OUTPUT"

      - name: Run update if available
        if: steps.check.outputs.has_changes == '1'
        run: |
          python -m cruft update --skip-apply-ask --refresh-private-variables
          git restore --staged .

      - name: Create pull request
        if: steps.check.outputs.has_changes == '1'
        run: |
          git checkout -b "${{ matrix.branch }}"
          git add "${{ matrix.add-paths }}"
          git commit -m "${{ matrix.commit-message }}"
          git push origin "${{ matrix.branch }}" --force # Replaces the branch if it already exists
          EXISTING_PR=$(gh pr list --state open --base main --head "${{ matrix.branch }}" --json number --jq '.[0].number')
          if [ -n "$EXISTING_PR" ]; then
            echo "PR already exists: $EXISTING_PR, skipping creation"
          else
            gh pr create --title "${{ matrix.title }}" --body "${{ matrix.body }}" --base main --head "${{ matrix.branch }}"
          fi
